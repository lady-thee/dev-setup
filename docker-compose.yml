networks:
  app_network:
    driver: bridge

services:
  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq_container
    ports:
      - "15671:5672"
      - "15672:15672" 
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - app_network 
    restart: unless-stopped

  # API Gateway Service (HTTP entry point for clients, translates to RMQ)
  api-gateway: 
    build:
      context: ../api_gateway
      dockerfile: Dockerfile
      secrets:
        - npmtoken
    container_name: api_gateway_service
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - app_network 
    restart: unless-stopped
    healthcheck: 
      # test: ["CMD", "node", "dist/healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Auth Microservice (RPC Server listening on RabbitMQ)
  auth-service:
    build:
      context: ../auth_service
      target: production
      dockerfile: Dockerfile
      secrets:
        - npmtoken
    container_name: order-auth-app 
    working_dir: /app
    environment:
      NODE_ENV: development
      # Auth service connects to RabbitMQ
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672
      DB_HOST: db
      DB_PORT: ${POSTGRES_PORT}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${POSTGRES_DB}
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?schema=auth
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
    depends_on:
      rabbitmq:
        condition: service_healthy
      db: # Auth service depends on the database
        condition: service_healthy
    healthcheck:
      # test: ["CMD", "node", "dist/healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - app_network # Connect to the shared network
  
  notification-service:
    build:
      context: ../notification_service
      target: production
      dockerfile: Dockerfile
      secrets:
        - npmtoken
    container_name: order-notification-app 
    working_dir: /app
    environment:
      NODE_ENV: development
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672
      BREVO_API_KEY: ${BREVO_API_KEY}
      BREVO_EMAIL: ${BREVO_EMAIL}
      BREVO_NAME: ${BREVO_NAME}
      BREVO_API_URL: ${BREVO_API_URL}
      DB_HOST: db
      DB_PORT: ${POSTGRES_PORT}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${POSTGRES_DB}
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?schema=notification
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy
    healthcheck:
      # test: ["CMD", "node", "dist/healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - app_network # Connect to the shared network

  # PostgreSQL Database Service
  db:
    image: postgres:17-alpine
    container_name: order_db_container
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_INITDB_ARGS: --encoding=UTF-8
      POSTGRES_HOST_AUTH_METHOD: trust
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    ports:
      - "15432:5432"
    volumes:
      - order-platform-postgres_data:/var/lib/postgresql/data
      - ./postgres/init-scripts:/docker-entrypoint-initdb.d/ 
    networks:
      - app_network
    restart: unless-stopped

  # PGAdmin for Database Management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin_container
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app_network
    restart: unless-stopped

volumes:
  order-platform-postgres_data:


secrets:
  npmtoken:
    environment: NPM_TOKEN